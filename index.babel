const board = {
  width: 384, // set to boardDims * 12
  height: 384, // set to boardDims * 12
  margin: 'auto'
}

const livingCell = {
  width: 10,
  height: 10,
  margin: 1,
  borderRadius: 5,
  backgroundColor: '#F0FB8F', //F0FB8F EEF98D
  display: 'inline-block',
  float: 'left'
};

const deadCell = {
  width: 10,
  height: 10,
  margin: 1,
  //backgroundColor: 'black',
  display: 'inline-block',
  float: 'left',
}

var pause = 0;
var delayOneSec;

class LivingTile extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div
        style={livingCell}
        onClick={this.props.func}/>
      );
  }
};

class DeadTile extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div
        style={deadCell}
        onClick={this.props.func}/>
      );
  }
};

class Board extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      status: [],
      genCount: 0,
      boardDims: 32
    };
    this.createStatus = this.createStatus.bind(this);
    this.changeStatus = this.changeStatus.bind(this);
    this.clearStatus = this.clearStatus.bind(this);
    this.pause = this.pause.bind(this);
    this.resume = this.resume.bind(this);
    this.cellClick = this.cellClick.bind(this);
    this.nextGeneration = this.nextGeneration.bind(this);
  }

  componentDidMount() {
      this.createStatus();
      delayOneSec = setTimeout(this.nextGeneration, 1000);
  }

  // checks for living cells.
  allDead() {
    for (var a = 0; a < this.state.status.length; a++) {
      for (var b = 0; b < this.state.status[a].length; b++) {
        if (this.state.status[a][b] == 'Alive') {
          return false;
        }
      }
    }
  }

  //initializes status by randomly assigning Alive or Dead to all the cells
  createStatus() {
    if (this.state.status.length == 0) {
      var arr = this.state.status;
      for (var x = 0; x < this.state.boardDims; x++) {
        arr.push([]);
        for (var y = 0; y < this.state.boardDims; y++) {
          const random = Math.random() > .5;
          if (random) {
            arr[x].push('Alive');
          } else {
            arr[x].push('Dead');
          }
        }
      }
      this.setState({status: arr});
    } else {
      this.changeStatus();
    }
  }

  //re randomizes the cells status
  changeStatus() {
    var blap = this.state.status;
    for (var i = 0; i < blap.length; i++) {
      for (var y = 0; y < blap[i].length; y++) {
        const random1 = Math.random() > .5;
        if (random1) {
          blap[i][y] = 'Alive';
        } else {
          blap[i][y] = 'Dead';
        }
      }
    }
    this.setState({status: blap});
  }

  //assigns all cells status to "Dead"
  clearStatus() {
    var statusArr = [];

    for (var i = 0; i < this.state.status.length; i++) {
      statusArr[i] = this.state.status[i].slice();
    }

    for (var k = 0; k < statusArr.length; k++) {
      for (var n = 0; n < statusArr[k].length; n++) {
        statusArr[k][n] = 'Dead';
      }
    }

    this.setState({status: statusArr, genCount: 0});
    this.pause();
  }

  //pauses the game
  pause() {
    if (pause === 0) {
      clearTimeout(delayOneSec);
      pause = 1;
    }
  }

  //resumes the game
  resume() {
    if (pause === 1) {
      pause = 0;
      this.nextGeneration();
    }
  }

  //takes the "location"/indexes of a cell as an argument and updates the cells
  //status from alive to dead and vice versa
  cellClick(id) {
    const location = id.split(" ");
    var statusArr = [];

    //clones state.status to statusArr
    for (var i = 0; i < this.state.status.length; i++) {
      statusArr[i] = this.state.status[i].slice();
    }

    //Changes the status of the clicked cell in statusArr.
    if (statusArr[location[0]][location[1]] == "Alive") {
      statusArr[location[0]][location[1]] = "Dead";
    } else if (statusArr[location[0]][location[1]] == "Dead"){
      statusArr[location[0]][location[1]] = "Alive";
    }

    //updates state.status to statusArr
    this.setState({status: statusArr});
  }

  //determines what the next generation will look like
  nextGeneration() {
    var statusArr = this.state.status.slice();
    var updatedArr = [];

    //clones statusArr into updatedArr
    for (var i = 0; i < statusArr.length; i++) {
      updatedArr[i] = statusArr[i].slice();
    }

    //gets the status of the cells neighbors
    for (var y = 0; y < statusArr.length; y++) {
      for (var x = 0; x < statusArr[y].length; x++) {
        // top row neighbors
        if (y == 0) {
          var neighborStatus = [
            statusArr[y][x - 1],
            statusArr[y][x + 1],
            statusArr[y + 1][x - 1],
            statusArr[y + 1][x],
            statusArr[y + 1][x + 1]
          ];
          updatedArr[y][x] = this.gameRules(neighborStatus, statusArr[y][x]);
          // bottom row neighbors
        } else if (y == statusArr.length - 1){
          var neighborStatus = [
            statusArr[y - 1][x - 1],
            statusArr[y - 1][x],
            statusArr[y - 1][x + 1],
            statusArr[y][x - 1],
            statusArr[y][x + 1]
          ];
          updatedArr[y][x] = this.gameRules(neighborStatus, statusArr[y][x]);
          // all other neighbors
        } else {
          var neighborStatus = [
            statusArr[y - 1][x - 1],
            statusArr[y - 1][x],
            statusArr[y - 1][x + 1],
            statusArr[y][x - 1],
            statusArr[y][x + 1],
            statusArr[y + 1][x - 1],
            statusArr[y + 1][x],
            statusArr[y + 1][x + 1]
          ];
          updatedArr[y][x] = this.gameRules(neighborStatus, statusArr[y][x]);
        }
      }
    }

    this.setState({status: updatedArr});
    if (pause === 0 && this.allDead() === false) {
      this.setState({genCount: this.state.genCount + 1});
      delayOneSec = setTimeout(this.nextGeneration, 1000);
    }
  }

  //applies the game's rules
  gameRules(neighborStatusArgument, cell) {
    //counts the living neighbors
    var tempCell = '';
    var livingNeighborCount = 0;

    for (var i = 0; i < neighborStatusArgument.length; i++) {
      if (neighborStatusArgument[i] == 'Alive') {
        livingNeighborCount++;
      }
    }

    //applies the game's rules and updates the tempCell's status accordingly
    if (cell == 'Dead' && livingNeighborCount == 3) {
      tempCell = 'Alive';
    } else if (cell == 'Alive' && (livingNeighborCount < 2 || livingNeighborCount > 3)) {
      tempCell = 'Dead';
    }

    //if a change occured returns the change. if not returns original value
    if (tempCell == '') {
      return cell
    } else {
      return tempCell
    }
  }

  render() {
    //creates the board by mapping state.status. binds the indexes as an
    //argument to pass to the cellClick function. that way clicking a cell will
    //do something unique to the cell that was clicked.
    const boardCreate = this.state.status.map((thing, index) => {
      return thing.map((thing2, index2) => {
        if (thing2 === 'Alive') {
          return <LivingTile key={index + " " + index2} func={this.cellClick.bind(this, index + " " + index2)}/>
        } else {
          return <DeadTile key={index + " " + index2} func={this.cellClick.bind(this, index + " " + index2)}/>
        }
      })
    })
    return (<div>
      <div id='generation'>
      Generation: {this.state.genCount}
      </div>
      <div style={board}>
        {boardCreate}
      </div>
      <button type="button" className="btn btn-dark" onClick={this.resume}>Run</button>
      <button type="button" className="btn btn-dark" onClick={this.clearStatus}>Clear</button>
      <button type="button" className="btn btn-dark" onClick={this.pause}>Pause</button>
      {/*<button onClick={this.nextGeneration}>Next Gen</button> Used for debugging
      Advnaces generation one at a time*/}
    </div>);
  }
}
ReactDOM.render(<Board/>, document.getElementById("lifeGame"));
