const board = {
  backgroundColor: 'gray',
  width: 192,
  height: 192
}

const livingCell = {
  width: 10,
  height: 10,
  margin: 1,
  backgroundColor: 'red',
  display: 'inline-block',
  float: 'left'
};

const deadCell = {
  width: 10,
  height: 10,
  margin: 1,
  backgroundColor: 'black',
  display: 'inline-block',
  float: 'left'
}

var pause = 0;

class LivingTile extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (<div style={livingCell}/>);
  }
};

class DeadTile extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (<div style={deadCell}/>);
  }
};

class Board extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      status: []
    };
    this.addStatus = this.addStatus.bind(this);
    this.createStatus = this.createStatus.bind(this);
    this.clearStatus = this.clearStatus.bind(this);
    this.changeStatus = this.changeStatus.bind(this);
    this.pause = this.pause.bind(this);
    this.nextGeneration = this.nextGeneration.bind(this);
  }

  changeStatus() {
    var blap = this.state.status;
    for (var i = 0; i < blap.length; i++) {
      for (var y = 0; y < blap[i].length; y++) {
        const random1 = Math.random() > .5;
        if (random1) {
          blap[i][y] = 'Alive';
        } else {
          blap[i][y] = 'Dead';
        }
      }
    }
    this.setState({status: blap});
  }

  addStatus() {
    var blip = this.state.status;
    const random = Math.random() > .5;
    if (random) {
      blip.push('Alive');
    } else {
      blip.push('Dead');
    }
    this.setState({status: blip});
  }

  createStatus() {
    if (this.state.status.length == 0) {
      var arr = this.state.status;
      for (var x = 0; x < 16; x++) {
        arr.push([]);
        for (var y = 0; y < 16; y++) {
          const random = Math.random() > .5;
          if (random) {
            arr[x].push('Alive');
          } else {
            arr[x].push('Dead');
          }
        }
      }
      this.setState({status: arr});
    } else {
      this.changeStatus();
    }
  }

  clearStatus() {
    this.setState({status: []});
  }

  componentDidUpdate() {
    if (pause === 0) {
      setTimeout(this.nextGeneration, 1000);
    }
  }

  pause() {
    if (pause === 0) {
      pause = 1;
    } else {
      pause = 0;
      this.changeStatus();
    }
  }

  nextGeneration() {
    var statusArr = this.state.status.slice();
    var updatedArr = [];

    //clones statusArr into updatedArr
    for (var i = 0; i < statusArr.length; i++) {
      updatedArr[i] = statusArr[i].slice();
    }

    //gets the status of the cells neighbors
    for (var y = 0; y < 16; y++) {
      for (var x = 0; x < 16; x++) {
        // top row neighbors
        if (y == 0) {
          var neighborStatus = [
            statusArr[y][x - 1],
            statusArr[y][x + 1],
            statusArr[y + 1][x - 1],
            statusArr[y + 1][x],
            statusArr[y + 1][x + 1]
          ];
          updatedArr[y][x] = this.gameRules(neighborStatus, statusArr[y][x]);
          // bottom row neighbors
        } else if (y == 15){
          var neighborStatus = [
            statusArr[y - 1][x - 1],
            statusArr[y - 1][x],
            statusArr[y - 1][x + 1],
            statusArr[y][x - 1],
            statusArr[y][x + 1]
          ];
          updatedArr[y][x] = this.gameRules(neighborStatus, statusArr[y][x]);
          // all other neighbors
        } else {
          var neighborStatus = [
            statusArr[y - 1][x - 1],
            statusArr[y - 1][x],
            statusArr[y - 1][x + 1],
            statusArr[y][x - 1],
            statusArr[y][x + 1],
            statusArr[y + 1][x - 1],
            statusArr[y + 1][x],
            statusArr[y + 1][x + 1]
          ];
          updatedArr[y][x] = this.gameRules(neighborStatus, statusArr[y][x]);
        }
      }
    }
    this.setState({status: updatedArr});
  }

  gameRules(neighborStatusArgument, cell) {
    //counts the living neighbors
    var tempCell = '';
    var livingNeighborCount = 0;

    for (var i = 0; i < neighborStatusArgument.length; i++) {
      if (neighborStatusArgument[i] == 'Alive') {
        livingNeighborCount++;
      }
    }

    //applys the game's rules and updates the tempCell's status accordingly
    if (cell == 'Dead' && livingNeighborCount == 3) {
      tempCell = 'Alive';
    } else if (cell == 'Alive' && (livingNeighborCount < 2 || livingNeighborCount > 3)) {
      tempCell = 'Dead';
    }

    //if a change occured returns the change. if not returns original value
    if (tempCell == '') {
      return cell
    } else {
      return tempCell
    }
  }

  render() {
    const boardCreate = this.state.status.map(function mapper(thing, index) {
      return thing.map(function anotherMapper(thing2, index) {
        if (thing2 === 'Alive') {
          return <LivingTile/>
        } else {
          return <DeadTile/>
        }
      })
    })
    return (<div>
      <div style={board}>
        {boardCreate}
      </div>
      <button onClick={this.createStatus}>Go</button>
      <button onClick={this.clearStatus}>Clear</button>
      <button onClick={this.pause}>Pause</button>
      <button onClick={this.nextGeneration}>Next Gen</button>
    </div>);
  }
}
ReactDOM.render(<Board/>, document.getElementById("lifeGame"));
